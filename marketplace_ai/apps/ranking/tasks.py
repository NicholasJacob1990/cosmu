"""\nTasks Celery para atualização periódica de métricas dinâmicas.\n\n* update_metrics()     — job diário; recalcula rating, engajamento, confiança\n* update_single_prof() — atualiza métricas de um profissional específico\n"""\nfrom __future__ import annotations\n\nfrom celery import shared_task\nfrom django.db.models import Avg, Count, Q\nfrom django.utils import timezone\nfrom datetime import timedelta\n\nfrom apps.profiles.models import Professional, Review, Message\n\n\n@shared_task\ndef update_metrics() -> None:\n    \"\"\"\n    Task diária: recalcula métricas de todos os profissionais ativos.\n    \n    Executa em batch para evitar sobrecarga. Pode ser agendada\n    via django-crontab ou Celery Beat.\n    \"\"\"\n    professionals = Professional.objects.all()\n    \n    for prof in professionals.iterator(chunk_size=100):\n        update_single_prof.delay(prof.pk)\n\n\n@shared_task \ndef update_single_prof(prof_id: int) -> None:\n    \"\"\"\n    Atualiza métricas dinâmicas de um profissional específico:\n    \n    1. rating           — média das avaliações\n    2. engagement_score — % de mensagens respondidas em 7d\n    3. confidence_score — combinação de verificações\n    \"\"\"\n    try:\n        prof = Professional.objects.get(pk=prof_id)\n    except Professional.DoesNotExist:\n        return\n        \n    # 1. Rating médio\n    rating_avg = Review.objects.filter(\n        professional=prof\n    ).aggregate(avg=Avg(\"stars\"))[\"avg\"]\n    \n    prof.rating = rating_avg or 0.0\n    \n    # 2. Engagement score (últimos 7 dias)\n    week_ago = timezone.now() - timedelta(days=7)\n    \n    total_msgs = Message.objects.filter(\n        professional=prof,\n        created_at__gte=week_ago\n    ).count()\n    \n    replied_msgs = Message.objects.filter(\n        professional=prof,\n        created_at__gte=week_ago\n    ).count()\n    \n    if total_msgs > 0:\n        prof.engagement_score = replied_msgs / total_msgs\n    else:\n        prof.engagement_score = 0.0\n        \n    # 3. Confidence score (nova fórmula com academic_score)\n    prof.confidence_score = (\n        0.50 * (1 if prof.kyc_verified else 0.5) +\n        0.20 * prof.academic_score +\n        0.30 * (1 - prof.dispute_rate)\n    )\n    \n    prof.save(update_fields=[\n        \"rating\", \n        \"engagement_score\", \n        \"confidence_score\"\n    ])