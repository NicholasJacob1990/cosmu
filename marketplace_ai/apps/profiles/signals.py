"""\nGera embedding + indexa profissional toda vez que o perfil muda.\n"""\nimport os\nfrom django.db import transaction\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\n\nfrom .models import Professional\n\n\n@receiver(post_save, sender=Professional)\ndef enqueue_embedding(sender, instance: Professional, **kwargs):  # noqa: D401\n    \"\"\"\n    Dispara task Celery only *after* commit para evitar race-condition.\n    \"\"\"\n    from apps.search.tasks import generate_embedding  # lazy import\n\n    transaction.on_commit(lambda: generate_embedding.delay(instance.pk))\n    \n    # Se ORCID ou Lattes foi adicionado, dispara coleta acadÃªmica\n    if instance.orcid_id or instance.lattes_id:\n        from apps.ingest.tasks import refresh_academic_score\n        transaction.on_commit(\n            lambda: refresh_academic_score.delay(instance.pk)\n        )