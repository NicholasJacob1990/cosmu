# Generated by Django 5.2.4 on 2025-07-31 04:05

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="PlanFeature",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("plan_id", models.CharField(max_length=100)),
                ("feature_name", models.CharField(max_length=100)),
                ("feature_value", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("first_name", models.CharField(blank=True, max_length=100)),
                ("last_name", models.CharField(blank=True, max_length=100)),
                (
                    "user_type",
                    models.CharField(
                        choices=[("client", "Client"), ("freelancer", "Freelancer")],
                        default="client",
                        max_length=10,
                    ),
                ),
                (
                    "profile_image_url",
                    models.URLField(blank=True, max_length=1024, null=True),
                ),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("phone_verified", models.BooleanField(default=False)),
                ("email_verified", models.BooleanField(default=False)),
                ("two_factor_enabled", models.BooleanField(default=False)),
                ("two_factor_secret", models.CharField(blank=True, max_length=100)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="api_user_set",
                        related_query_name="user",
                        to="auth.group",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="api_user_set",
                        related_query_name="user",
                        to="auth.permission",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AddOn",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("type", models.CharField(max_length=100)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("currency", models.CharField(default="BRL", max_length=3)),
                ("configuration", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="addons",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("slug", models.SlugField(max_length=200, unique=True)),
                ("description", models.TextField(blank=True)),
                ("icon", models.CharField(blank=True, max_length=100)),
                ("level", models.IntegerField(default=0)),
                ("path", models.CharField(blank=True, max_length=500)),
                ("order_index", models.IntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="api.category",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Categories",
                "ordering": ["level", "order_index", "name"],
            },
        ),
        migrations.CreateModel(
            name="FreelancerProfile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=200)),
                ("bio", models.TextField(blank=True)),
                ("skills", models.JSONField(default=list)),
                (
                    "hourly_rate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "average_rating",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=3),
                ),
                ("total_reviews", models.IntegerField(default=0)),
                ("completed_projects", models.IntegerField(default=0)),
                ("profile_views", models.IntegerField(default=0)),
                ("response_time", models.IntegerField(blank=True, null=True)),
                ("is_verified", models.BooleanField(default=False)),
                (
                    "success_rate",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="Cidade/Estado ou 'Remoto'",
                        max_length=255,
                    ),
                ),
                (
                    "coverage_areas",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Áreas de atendimento, ex: ['Bairro X', 'Cidade Y']",
                    ),
                ),
                (
                    "languages",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Idiomas falados, ex: ['Português', 'Inglês']",
                    ),
                ),
                (
                    "portfolio",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Lista de projetos no portfólio: [{'title': '...', 'url': '...', 'description': '...'}]",
                    ),
                ),
                (
                    "certifications",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Certificações: [{'name': '...', 'issuer': '...', 'year': '...'}]",
                    ),
                ),
                (
                    "availability",
                    models.CharField(
                        blank=True,
                        help_text="Ex: 'Integral', 'Meio Período'",
                        max_length=100,
                    ),
                ),
                (
                    "availability_hours",
                    models.CharField(
                        blank=True, help_text="Ex: '9h-18h'", max_length=100
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="freelancer_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("content", models.TextField()),
                ("is_read", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "receiver",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("order_number", models.CharField(max_length=50, unique=True)),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "platform_fee",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "processing_fee",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("total_amount", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "freelancer_amount",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("accepted", "Accepted"),
                            ("in_progress", "In Progress"),
                            ("disputed", "Disputed"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "escrow_status",
                    models.CharField(
                        choices=[
                            ("none", "None"),
                            ("held", "Held"),
                            ("partially_released", "Partially Released"),
                            ("released", "Released"),
                            ("refunded", "Refunded"),
                        ],
                        default="none",
                        max_length=20,
                    ),
                ),
                ("dispute_reason", models.TextField(blank=True)),
                ("dispute_resolution", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("accepted_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "freelancer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="orders",
                        to="api.freelancerprofile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Título claro e conciso do projeto", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Descrição detalhada: objetivos, entregaveis, requisitos"
                    ),
                ),
                (
                    "project_type",
                    models.CharField(
                        choices=[("hourly", "Por Hora"), ("fixed", "Preço Fixo")],
                        default="fixed",
                        help_text="Por hora ou preço fixo",
                        max_length=20,
                    ),
                ),
                (
                    "hourly_rate_min",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Taxa horária mínima aceita (R$/hora)",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "hourly_rate_max",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Taxa horária máxima aceita (R$/hora)",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "estimated_hours",
                    models.IntegerField(
                        blank=True,
                        help_text="Estimativa de horas necessárias",
                        null=True,
                    ),
                ),
                (
                    "budget_min",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Orçamento mínimo para preço fixo",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "budget_max",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Orçamento máximo para preço fixo",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "required_skills",
                    models.JSONField(
                        default=list,
                        help_text="Competências necessárias: ['Python', 'Django', 'React']",
                    ),
                ),
                (
                    "experience_level",
                    models.CharField(
                        choices=[
                            ("entry", "Iniciante"),
                            ("intermediate", "Intermediário"),
                            ("expert", "Especialista"),
                        ],
                        default="intermediate",
                        help_text="Nível de experiência desejado",
                        max_length=20,
                    ),
                ),
                (
                    "deadline",
                    models.DateTimeField(
                        blank=True, help_text="Prazo final para conclusão", null=True
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(
                        blank=True, help_text="Data de início desejada", null=True
                    ),
                ),
                (
                    "attachments",
                    models.JSONField(
                        default=list,
                        help_text="Arquivos anexados: briefings, wireframes, etc.",
                    ),
                ),
                (
                    "screening_questions",
                    models.JSONField(
                        default=list,
                        help_text="Perguntas para filtrar candidatos: [{'question': '...', 'required': true}, ...]",
                    ),
                ),
                (
                    "location_preference",
                    models.CharField(
                        blank=True,
                        help_text="Preferência de localização: 'Remoto', 'São Paulo', etc.",
                        max_length=200,
                    ),
                ),
                (
                    "language_preference",
                    models.CharField(
                        default="Português",
                        help_text="Idioma preferido para comunicação",
                        max_length=100,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Rascunho"),
                            ("open", "Aberto para Propostas"),
                            ("in_review", "Analisando Propostas"),
                            ("assigned", "Atribuído"),
                            ("in_progress", "Em Andamento"),
                            ("completed", "Concluído"),
                            ("cancelled", "Cancelado"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("proposal_count", models.IntegerField(default=0)),
                ("view_count", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assigned_freelancer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_projects",
                        to="api.freelancerprofile",
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="custom_projects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Projeto Personalizado",
                "verbose_name_plural": "Projetos Personalizados",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Proposal",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "proposed_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Preço proposto (total ou por hora)",
                        max_digits=10,
                    ),
                ),
                (
                    "proposed_timeline",
                    models.IntegerField(default=7, help_text="Prazo proposto em dias"),
                ),
                (
                    "cover_letter",
                    models.TextField(
                        help_text="Carta de apresentação explicando por que é o melhor candidato"
                    ),
                ),
                (
                    "screening_answers",
                    models.JSONField(
                        default=list,
                        help_text="Respostas às perguntas de triagem do cliente",
                    ),
                ),
                (
                    "relevant_portfolio",
                    models.JSONField(
                        default=list, help_text="Links para trabalhos relevantes"
                    ),
                ),
                (
                    "proposed_milestones",
                    models.JSONField(
                        default=list,
                        help_text="Marcos propostos: [{'name': 'Fase 1', 'price': 500, 'deadline': '2025-02-15'}, ...]",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pendente"),
                            ("viewed", "Visualizada"),
                            ("shortlisted", "Pré-selecionada"),
                            ("accepted", "Aceita"),
                            ("declined", "Recusada"),
                            ("withdrawn", "Retirada"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("viewed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "client_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notas privadas do cliente sobre esta proposta",
                    ),
                ),
                (
                    "connects_spent",
                    models.IntegerField(
                        default=2,
                        help_text="Número de connects gastos para enviar esta proposta",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "freelancer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submitted_proposals",
                        to="api.freelancerprofile",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="proposals",
                        to="api.project",
                    ),
                ),
            ],
            options={
                "verbose_name": "Proposta",
                "verbose_name_plural": "Propostas",
                "ordering": ["-created_at"],
                "unique_together": {("project", "freelancer")},
            },
        ),
        migrations.AddField(
            model_name="project",
            name="accepted_proposal",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="accepted_for_project",
                to="api.proposal",
            ),
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("rating", models.IntegerField()),
                ("comment", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "order",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review",
                        to="api.order",
                    ),
                ),
                (
                    "reviewer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ServicePackage",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Ex: 'Eu vou criar um design de logotipo profissional'",
                        max_length=255,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Descrição detalhada do serviço oferecido"
                    ),
                ),
                (
                    "pricing_tiers",
                    models.JSONField(
                        default=dict,
                        help_text="Estrutura: {basic: {price: 50, delivery_days: 3, revisions: 1, features: []}, ...}",
                    ),
                ),
                (
                    "requirements_form",
                    models.JSONField(
                        default=list,
                        help_text="Lista de campos que o cliente deve preencher: [{field: 'nome_empresa', type: 'text', required: true}, ...]",
                    ),
                ),
                (
                    "faq",
                    models.JSONField(
                        default=list,
                        help_text="Perguntas frequentes: [{question: 'Pergunta', answer: 'Resposta'}, ...]",
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        default=list,
                        help_text="Palavras-chave para busca: ['logo', 'design', 'branding']",
                    ),
                ),
                (
                    "gallery",
                    models.JSONField(
                        default=list,
                        help_text="URLs de imagens/vídeos de exemplo: [{'type': 'image', 'url': '...', 'description': '...'}]",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("paused", "Paused"),
                            ("draft", "Draft"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("view_count", models.IntegerField(default=0)),
                ("order_count", models.IntegerField(default=0)),
                ("conversion_rate", models.FloatField(default=0.0)),
                (
                    "average_rating",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=3),
                ),
                ("is_featured", models.BooleanField(default=False)),
                (
                    "extra_services",
                    models.JSONField(
                        default=list,
                        help_text="Serviços extras opcionais: [{'name': 'Entrega expressa', 'price': 20}, ...]",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="service_packages",
                        to="api.category",
                    ),
                ),
                (
                    "freelancer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="service_packages",
                        to="api.freelancerprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pacote de Serviço",
                "verbose_name_plural": "Pacotes de Serviço",
                "ordering": ["-is_featured", "-average_rating", "-order_count"],
            },
        ),
        migrations.CreateModel(
            name="ServiceOrder",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "order_number",
                    models.CharField(blank=True, max_length=50, unique=True),
                ),
                (
                    "selected_tier",
                    models.CharField(
                        choices=[
                            ("basic", "Básico"),
                            ("standard", "Padrão"),
                            ("premium", "Premium"),
                        ],
                        default="basic",
                        help_text="Tier escolhido: básico, padrão ou premium",
                        max_length=20,
                    ),
                ),
                (
                    "selected_extras",
                    models.JSONField(
                        default=list,
                        help_text="Extras adicionais selecionados: [{'name': 'Entrega expressa', 'price': 20}, ...]",
                    ),
                ),
                (
                    "requirements_data",
                    models.JSONField(
                        default=dict,
                        help_text="Dados preenchidos no formulário de requisitos",
                    ),
                ),
                ("base_price", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "extras_price",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("total_price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("estimated_delivery", models.DateTimeField(blank=True, null=True)),
                ("actual_delivery", models.DateTimeField(blank=True, null=True)),
                (
                    "deliveries",
                    models.JSONField(
                        default=list,
                        help_text="Histórico de entregas: [{'version': 1, 'files': [], 'message': '...', 'date': '...'}, ...]",
                    ),
                ),
                ("revisions_used", models.IntegerField(default=0)),
                ("revisions_allowed", models.IntegerField(default=0)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending_requirements", "Aguardando Requisitos"),
                            ("in_queue", "Na Fila"),
                            ("in_progress", "Em Andamento"),
                            ("pending_review", "Aguardando Revisão"),
                            ("revision_requested", "Revisão Solicitada"),
                            ("delivered", "Entregue"),
                            ("completed", "Concluído"),
                            ("cancelled", "Cancelado"),
                        ],
                        default="pending_requirements",
                        max_length=30,
                    ),
                ),
                ("client_feedback", models.TextField(blank=True)),
                ("freelancer_notes", models.TextField(blank=True)),
                (
                    "requirements_submitted_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("work_started_at", models.DateTimeField(blank=True, null=True)),
                ("delivered_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="service_orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "freelancer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="service_orders",
                        to="api.freelancerprofile",
                    ),
                ),
                (
                    "service_package",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="service_orders",
                        to="api.servicepackage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pedido de Serviço",
                "verbose_name_plural": "Pedidos de Serviço",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="order",
            name="service_package",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="api.servicepackage",
            ),
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("plan_id", models.CharField(default="free", max_length=100)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("trial", "Trial"),
                            ("cancelled", "Cancelled"),
                            ("expired", "Expired"),
                            ("suspended", "Suspended"),
                        ],
                        default="active",
                        max_length=50,
                    ),
                ),
                (
                    "billing_cycle",
                    models.CharField(
                        choices=[("monthly", "Monthly"), ("annual", "Annual")],
                        default="monthly",
                        max_length=20,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("trial_ends_at", models.DateTimeField(blank=True, null=True)),
                ("cancelled_at", models.DateTimeField(blank=True, null=True)),
                ("cancel_reason", models.TextField(blank=True)),
                ("features", models.JSONField(blank=True, default=dict)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscription",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Transaction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("payment", "Payment"),
                            ("release", "Release"),
                            ("refund", "Refund"),
                            ("fee", "Fee"),
                        ],
                        default="payment",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("currency", models.CharField(default="BRL", max_length=3)),
                ("payment_method", models.CharField(blank=True, max_length=50)),
                ("provider", models.CharField(blank=True, max_length=100)),
                ("transaction_id", models.CharField(blank=True, max_length=255)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transactions",
                        to="api.order",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="FeatureUsage",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("feature", models.CharField(max_length=100)),
                ("period", models.CharField(max_length=7)),
                ("used", models.IntegerField(default=0)),
                ("limit", models.IntegerField(default=-1)),
                ("last_used", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feature_usages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "feature", "period")},
            },
        ),
    ]
