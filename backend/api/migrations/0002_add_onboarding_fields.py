# Generated by Django 5.2.4 on 2025-08-01 14:46

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0001_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="freelancerprofile",
            name="stripe_account_id",
            field=models.CharField(
                blank=True, help_text="ID da conta Stripe Connect", max_length=255
            ),
        ),
        migrations.AddField(
            model_name="freelancerprofile",
            name="stripe_charges_enabled",
            field=models.BooleanField(
                default=False, help_text="Se pode receber pagamentos"
            ),
        ),
        migrations.AddField(
            model_name="freelancerprofile",
            name="stripe_onboarding_completed",
            field=models.BooleanField(
                default=False, help_text="Se completou o onboarding do Stripe"
            ),
        ),
        migrations.AddField(
            model_name="freelancerprofile",
            name="stripe_payouts_enabled",
            field=models.BooleanField(
                default=False, help_text="Se pode realizar saques"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="entity_type",
            field=models.CharField(
                blank=True,
                choices=[("pf", "Pessoa Física"), ("pj", "Pessoa Jurídica")],
                help_text="Pessoa física ou jurídica",
                max_length=5,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="onboarding_completed",
            field=models.BooleanField(
                default=False,
                help_text="Se o usuário completou o processo de onboarding",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="onboarding_step",
            field=models.IntegerField(
                default=0, help_text="Etapa atual do onboarding (0 = não iniciado)"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="professional_type",
            field=models.CharField(
                blank=True,
                choices=[
                    ("health", "Profissional da Saúde"),
                    ("creative", "Profissional Criativo"),
                    ("tech", "Profissional de Tecnologia"),
                    ("business", "Profissional de Negócios"),
                    ("general", "Outros Serviços"),
                ],
                help_text="Tipo específico de profissional para onboarding personalizado",
                max_length=20,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="user",
            name="user_type",
            field=models.CharField(
                choices=[("client", "Client"), ("freelancer", "Freelancer")],
                default="client",
                max_length=15,
            ),
        ),
        migrations.CreateModel(
            name="Booking",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("scheduled_start", models.DateTimeField()),
                ("scheduled_end", models.DateTimeField()),
                ("actual_start", models.DateTimeField(blank=True, null=True)),
                ("actual_end", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Agendado"),
                            ("confirmed", "Confirmado"),
                            ("in_progress", "Em Andamento"),
                            ("completed", "Concluído"),
                            ("cancelled", "Cancelado"),
                            ("no_show", "Não Compareceu"),
                        ],
                        default="scheduled",
                        max_length=20,
                    ),
                ),
                (
                    "meeting_link",
                    models.URLField(
                        blank=True,
                        help_text="Link para reunião online (Google Meet, Zoom, etc.)",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Notas do cliente sobre o agendamento"
                    ),
                ),
                (
                    "freelancer_notes",
                    models.TextField(
                        blank=True, help_text="Notas internas do freelancer"
                    ),
                ),
                ("reminder_sent", models.BooleanField(default=False)),
                ("confirmation_sent", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("confirmed_at", models.DateTimeField(blank=True, null=True)),
                ("cancelled_at", models.DateTimeField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bookings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "freelancer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bookings",
                        to="api.freelancerprofile",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bookings",
                        to="api.order",
                    ),
                ),
            ],
            options={
                "ordering": ["scheduled_start"],
            },
        ),
        migrations.CreateModel(
            name="BookingChangeRequest",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "request_type",
                    models.CharField(
                        choices=[
                            ("reschedule", "Reagendamento"),
                            ("cancel", "Cancelamento"),
                            ("extend", "Extensão"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pendente"),
                            ("approved", "Aprovado"),
                            ("rejected", "Rejeitado"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("new_start", models.DateTimeField(blank=True, null=True)),
                ("new_end", models.DateTimeField(blank=True, null=True)),
                ("reason", models.TextField(help_text="Motivo da solicitação")),
                (
                    "response",
                    models.TextField(blank=True, help_text="Resposta à solicitação"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("responded_at", models.DateTimeField(blank=True, null=True)),
                (
                    "booking",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="change_requests",
                        to="api.booking",
                    ),
                ),
                (
                    "requested_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Dispute",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("dispute_number", models.CharField(max_length=20, unique=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("quality", "Qualidade do Trabalho"),
                            ("delivery", "Prazo de Entrega"),
                            ("scope", "Escopo do Projeto"),
                            ("communication", "Comunicação"),
                            ("payment", "Problemas de Pagamento"),
                            ("other", "Outros"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "Aberta"),
                            ("in_review", "Em Análise"),
                            ("in_mediation", "Em Mediação"),
                            ("arbitration", "Arbitragem"),
                            ("resolved_client", "Resolvida - Favor do Cliente"),
                            ("resolved_freelancer", "Resolvida - Favor do Freelancer"),
                            ("resolved_partial", "Resolvida - Parcial"),
                            ("cancelled", "Cancelada"),
                        ],
                        default="open",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Baixa"),
                            ("medium", "Média"),
                            ("high", "Alta"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                (
                    "disputed_amount",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                (
                    "original_amount",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                (
                    "resolution_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("refund_full", "Reembolso Total"),
                            ("refund_partial", "Reembolso Parcial"),
                            ("release_full", "Liberação Total"),
                            ("release_partial", "Liberação Parcial"),
                            ("remake_work", "Refazer Trabalho"),
                            ("extend_deadline", "Estender Prazo"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "resolution_amount",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("resolution_notes", models.TextField(blank=True)),
                ("auto_resolution_deadline", models.DateTimeField()),
                ("mediation_deadline", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("responded_at", models.DateTimeField(blank=True, null=True)),
                ("mediation_started_at", models.DateTimeField(blank=True, null=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "booking",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="disputes",
                        to="api.booking",
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="client_disputes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "freelancer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="freelancer_disputes",
                        to="api.freelancerprofile",
                    ),
                ),
                (
                    "mediator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="mediated_disputes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "opened_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="opened_disputes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="disputes",
                        to="api.order",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DisputeEvidence",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "evidence_type",
                    models.CharField(
                        choices=[
                            ("file", "Arquivo"),
                            ("screenshot", "Screenshot"),
                            ("chat_log", "Log de Conversa"),
                            ("email", "Email"),
                            ("other", "Outros"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "file",
                    models.FileField(
                        blank=True, null=True, upload_to="dispute_evidence/"
                    ),
                ),
                ("file_url", models.URLField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "dispute",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="evidence",
                        to="api.dispute",
                    ),
                ),
                (
                    "submitted_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DisputeMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "message_type",
                    models.CharField(
                        choices=[
                            ("client", "Mensagem do Cliente"),
                            ("freelancer", "Mensagem do Freelancer"),
                            ("mediator", "Mensagem do Mediador"),
                            ("system", "Mensagem do Sistema"),
                            ("auto_resolution", "Resolução Automática"),
                        ],
                        max_length=20,
                    ),
                ),
                ("content", models.TextField()),
                ("is_internal", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "dispute",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="api.dispute",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="DisputeResolution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "outcome",
                    models.CharField(
                        choices=[
                            ("client_favor", "Favor do Cliente"),
                            ("freelancer_favor", "Favor do Freelancer"),
                            ("partial_refund", "Reembolso Parcial"),
                            ("remake_work", "Refazer Trabalho"),
                            ("mutual_agreement", "Acordo Mútuo"),
                            ("no_fault", "Sem Culpa - Circunstâncias"),
                        ],
                        max_length=20,
                    ),
                ),
                ("reasoning", models.TextField()),
                (
                    "refund_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "freelancer_payment",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "platform_fee_waived",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("freelancer_penalty", models.BooleanField(default=False)),
                ("client_penalty", models.BooleanField(default=False)),
                ("additional_actions", models.TextField(blank=True)),
                ("agreed_by_client", models.BooleanField(default=False)),
                ("agreed_by_freelancer", models.BooleanField(default=False)),
                ("client_agreement_at", models.DateTimeField(blank=True, null=True)),
                (
                    "freelancer_agreement_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("executed", models.BooleanField(default=False)),
                ("executed_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "dispute",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="resolution",
                        to="api.dispute",
                    ),
                ),
                (
                    "executed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Availability",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "day_of_week",
                    models.IntegerField(
                        choices=[
                            (0, "Segunda-feira"),
                            (1, "Terça-feira"),
                            (2, "Quarta-feira"),
                            (3, "Quinta-feira"),
                            (4, "Sexta-feira"),
                            (5, "Sábado"),
                            (6, "Domingo"),
                        ]
                    ),
                ),
                (
                    "start_time",
                    models.TimeField(help_text="Horário de início (ex: 09:00)"),
                ),
                ("end_time", models.TimeField(help_text="Horário de fim (ex: 17:00)")),
                ("is_available", models.BooleanField(default=True)),
                (
                    "buffer_time",
                    models.IntegerField(
                        default=15,
                        help_text="Tempo de intervalo entre agendamentos em minutos",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "freelancer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="availabilities",
                        to="api.freelancerprofile",
                    ),
                ),
            ],
            options={
                "ordering": ["day_of_week", "start_time"],
                "unique_together": {("freelancer", "day_of_week", "start_time")},
            },
        ),
        migrations.CreateModel(
            name="TimeSlot",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("date", models.DateField()),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                ("is_available", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "booking",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="time_slots",
                        to="api.booking",
                    ),
                ),
                (
                    "freelancer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="time_slots",
                        to="api.freelancerprofile",
                    ),
                ),
            ],
            options={
                "ordering": ["date", "start_time"],
                "unique_together": {("freelancer", "date", "start_time")},
            },
        ),
    ]
