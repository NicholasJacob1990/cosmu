"""
Django settings for galax_ia_project project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-iu@j+n*ll+dxxcrahrprfwn-z)#z(6a6^ef=guu6u-+be3+e0e"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "rest_framework",
    "rest_framework.authtoken",
    "django_filters",
    "corsheaders",
    "channels",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.facebook",
    # "django_elasticsearch_dsl",  # Temporariamente desabilitado para migração
    "api",
]

AUTH_USER_MODEL = "api.User"

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "galax_ia_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "galax_ia_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8080",
    "http://127.0.0.1:8080",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]

CORS_ALLOW_CREDENTIALS = True

# Allow all headers for development
CORS_ALLOW_ALL_ORIGINS = True  # Only for development!

# Django Sites Framework
SITE_ID = 1

# Django Allauth settings
AUTHENTICATION_BACKENDS = [
    # Django's default authentication backend
    'django.contrib.auth.backends.ModelBackend',
    # Allauth authentication backend
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Allauth configuration
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300  # 5 minutos
ACCOUNT_LOGOUT_ON_GET = True

# Social account settings
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_QUERY_EMAIL = True

# Google OAuth2 settings (exemplo - você deve configurar suas próprias chaves)
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
    },
    'facebook': {
        'METHOD': 'oauth2',
        'SCOPE': ['email', 'public_profile'],
        'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
        'INIT_PARAMS': {'cookie': True},
        'FIELDS': [
            'id',
            'first_name',
            'last_name',
            'middle_name',
            'name',
            'name_format',
            'picture',
            'short_name',
            'email',
        ],
        'EXCHANGE_TOKEN': True,
        'LOCALE_FUNC': 'path.to.callable',
        'VERIFIED_EMAIL': False,
        'VERSION': 'v15.0',
    }
}

# Email backend for development (use console backend for testing)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# For production, configure SMTP settings:
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your-email@gmail.com'
# EMAIL_HOST_PASSWORD = 'your-app-password'

# Celery Configuration
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'America/Sao_Paulo'

# Celery Beat Schedule para tarefas periódicas
CELERY_BEAT_SCHEDULE = {
    'send-booking-reminders': {
        'task': 'api.tasks.send_booking_reminder',
        'schedule': 3600.0,  # Execute a cada hora
    },
    'clean-expired-time-slots': {
        'task': 'api.tasks.clean_expired_time_slots',
        'schedule': 86400.0,  # Execute diariamente
    },
    'auto-complete-past-bookings': {
        'task': 'api.tasks.auto_complete_past_bookings',
        'schedule': 1800.0,  # Execute a cada 30 minutos
    },
    'process-overdue-disputes': {
        'task': 'api.tasks.process_overdue_disputes',
        'schedule': 3600.0,  # Execute a cada hora
    },
    'escalate-disputes-to-mediation': {
        'task': 'api.tasks.escalate_disputes_to_mediation',
        'schedule': 14400.0,  # Execute a cada 4 horas
    },
    'reminder-dispute-deadline': {
        'task': 'api.tasks.reminder_dispute_deadline',
        'schedule': 21600.0,  # Execute a cada 6 horas
    },
}

# Stripe Settings
STRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY', 'pk_test_...')
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', 'sk_test_...')
STRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET', 'whsec_...')

# Frontend URL for redirects
FRONTEND_URL = os.environ.get('FRONTEND_URL', 'http://localhost:3000')

# AI Search System Settings
AI_SEARCH_BASE_URL = os.environ.get('AI_SEARCH_BASE_URL', 'http://localhost:8001')
AI_SEARCH_TIMEOUT = int(os.environ.get('AI_SEARCH_TIMEOUT', '5'))
AI_SEARCH_ENABLED = os.environ.get('AI_SEARCH_ENABLED', 'True').lower() == 'true'

# Django Channels Configuration
ASGI_APPLICATION = 'galax_ia_project.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

# Elasticsearch Configuration for Local Search
ELASTICSEARCH_DSL = {
    'default': {
        'hosts': os.environ.get('ELASTICSEARCH_HOSTS', 'localhost:9200'),
        'http_auth': (
            os.environ.get('ELASTICSEARCH_USER'),
            os.environ.get('ELASTICSEARCH_PASSWORD')
        ) if os.environ.get('ELASTICSEARCH_USER') else None,
        'timeout': 30,
        'max_retries': 3,
        'retry_on_timeout': True,
    },
}

# Elasticsearch settings
ELASTICSEARCH_INDEX_NAMES = {
    'services': 'galax_services',
    'freelancers': 'galax_freelancers',
    'categories': 'galax_categories',
}

# Auto refresh after document changes (set to False in production)
ELASTICSEARCH_DSL_AUTO_REFRESH = True

# Pagination for indexing large datasets
ELASTICSEARCH_DSL_QUERYSET_PAGINATION = 5000

# ============================================================================
# KYC (Know Your Customer) Configuration
# ============================================================================

# KYC Providers Configuration
KYC_PROVIDERS = {
    'unico': {
        'api_key': os.getenv('UNICO_API_KEY', ''),
        'endpoint': 'https://api.unico.com/v1/',
        'webhook_secret': os.getenv('UNICO_WEBHOOK_SECRET', ''),
        'enabled': os.getenv('UNICO_ENABLED', 'False').lower() == 'true'
    },
    'idwall': {
        'api_key': os.getenv('IDWALL_API_KEY', ''),
        'endpoint': 'https://api.idwall.co/v2/',
        'webhook_secret': os.getenv('IDWALL_WEBHOOK_SECRET', ''),
        'enabled': os.getenv('IDWALL_ENABLED', 'False').lower() == 'true'
    },
    'stripe': {
        'api_key': os.getenv('STRIPE_SECRET_KEY', ''),
        'endpoint': 'https://api.stripe.com/v1/',
        'webhook_secret': os.getenv('STRIPE_IDENTITY_WEBHOOK_SECRET', ''),
        'enabled': os.getenv('STRIPE_IDENTITY_ENABLED', 'False').lower() == 'true'
    },
    'serpro': {
        'api_key': os.getenv('SERPRO_API_KEY', ''),
        'endpoint': 'https://apigateway.serpro.gov.br/',
        'enabled': os.getenv('SERPRO_ENABLED', 'False').lower() == 'true'
    }
}

# File Storage for KYC Documents
KYC_STORAGE_BACKEND = os.getenv('KYC_STORAGE_BACKEND', 'django.core.files.storage.FileSystemStorage')

# AWS S3 Configuration (if using S3 for KYC documents)
if KYC_STORAGE_BACKEND == 'storages.backends.s3boto3.S3Boto3Storage':
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_KYC_BUCKET_NAME', 'galaxia-kyc-documents')
    AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME', 'us-east-1')
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_DEFAULT_ACL = 'private'  # KYC documents should be private
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }

# KYC Security Settings
KYC_MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB
KYC_ALLOWED_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/webp']
KYC_ALLOWED_DOCUMENT_TYPES = ['application/pdf'] + KYC_ALLOWED_IMAGE_TYPES
KYC_MAX_VERIFICATION_ATTEMPTS = 5
KYC_VERIFICATION_TIMEOUT_DAYS = 30

# Biometric Verification Settings
BIOMETRIC_MAX_FILE_SIZE = 20 * 1024 * 1024  # 20MB for videos
BIOMETRIC_ALLOWED_VIDEO_TYPES = ['video/mp4', 'video/webm', 'video/quicktime']
BIOMETRIC_MIN_LIVENESS_SCORE = 0.85
BIOMETRIC_MIN_QUALITY_SCORE = 0.7

# Logging Configuration for KYC
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'kyc_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'kyc.log'),
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'api.services.kyc_service': {
            'handlers': ['kyc_file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'api.views_kyc': {
            'handlers': ['kyc_file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Ensure logs directory exists
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)

# ============================================================================
# Stripe Configuration - Sprint 3-4
# ============================================================================

# Stripe API Keys
STRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY', 'pk_test_...')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY', 'sk_test_...')
STRIPE_WEBHOOK_SECRET = os.getenv('STRIPE_WEBHOOK_SECRET', 'whsec_...')

# Stripe Connect Settings
STRIPE_CONNECT_APPLICATION_FEE_PERCENT = 10.0  # 10% platform fee
STRIPE_CONNECT_CLIENT_ID = os.getenv('STRIPE_CONNECT_CLIENT_ID', 'ca_...')

# URLs para onboarding
STRIPE_CONNECT_RETURN_URL = os.getenv('STRIPE_CONNECT_RETURN_URL', 'http://localhost:3000/dashboard')
STRIPE_CONNECT_REFRESH_URL = os.getenv('STRIPE_CONNECT_REFRESH_URL', 'http://localhost:3000/onboarding')

# Payment processing settings
STRIPE_AUTO_CAPTURE_PAYMENTS = True
STRIPE_PAYMENT_DESCRIPTION_TEMPLATE = "Pagamento GalaxIA - Projeto #{order_id}"

# Webhook configuration
STRIPE_WEBHOOK_TOLERANCE = 300  # 5 minutes tolerance for webhook timestamps

# Currency and localization
STRIPE_DEFAULT_CURRENCY = 'brl'
STRIPE_LOCALE = 'pt-BR'

# Connect account defaults
STRIPE_CONNECT_ACCOUNT_DEFAULTS = {
    'type': 'express',
    'country': 'BR',
    'business_type': 'individual',
    'capabilities': {
        'card_payments': {'requested': True},
        'transfers': {'requested': True},
    },
    'settings': {
        'payouts': {
            'schedule': {
                'interval': 'weekly',
                'weekly_anchor': 'friday'
            }
        }
    }
}
